#
# Copyright (c) 2025 Nordic Semiconductor ASA
#
# SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
#

#
# DFU Extra Image extension
#
# This file provides functions for adding extra images which are not natively
# integrated to nRF Connect SDK to the DFU packages.
# It supports both multi-image binaries and ZIP packages, allowing applications 
# to extend the built-in DFU functionality with additional extra firmware images.
#

#
# Add a extra binary to DFU packages (both multi-image binary and ZIP)
#
# Usage:
#   dfu_add_extra_binary(
#     [MULTI_IMAGE_ID <id>]
#     [MCUBOOT_IMAGE_ID <id>]
#     BINARY_PATH <path>
#     [ZIP_NAME <name>]
#     [DEPENDS <target1> [<target2> ...]]
#   )
#
# Parameters:
#   MULTI_IMAGE_ID        - Numeric identifier for multi-image binary packaging (signed integer)
#                          Used in dfu_multi_image.bin. User must ensure the ID is unique
#                          and doesn't conflict with built-in IDs.
#   MCUBOOT_IMAGE_ID      - MCUboot image identifier for ZIP packages (non-negative integer)
#                          Used for MCUboot slot calculations and ZIP package metadata.
#                          User must ensure that the ID is supported by MCUmgr image management. 
#   BINARY_PATH           - Path to the binary file to include in the package.
#   ZIP_NAME              - Optional name for the binary in ZIP packages (defaults to basename of BINARY_PATH)
#   DEPENDS               - Optional list of CMake targets that must be built before
#                          this extra binary is available
#
# Note: At least one of MULTI_IMAGE_ID or MCUBOOT_IMAGE_ID must be provided.
#
function(dfu_add_extra_binary)
    cmake_parse_arguments(EXTRA "" "MULTI_IMAGE_ID;MCUBOOT_IMAGE_ID;BINARY_PATH;ZIP_NAME" "DEPENDS" ${ARGN})

    # Validate required parameters
    if(NOT DEFINED EXTRA_BINARY_PATH)
        message(FATAL_ERROR "dfu_add_extra_binary: BINARY_PATH is required")
    endif()

    if(NOT DEFINED EXTRA_MULTI_IMAGE_ID AND NOT DEFINED EXTRA_MCUBOOT_IMAGE_ID)
        message(FATAL_ERROR "dfu_add_extra_binary: Either MULTI_IMAGE_ID or MCUBOOT_IMAGE_ID (or both) must be provided")
    endif()

    # Set defaults for optional parameters
    if(NOT DEFINED EXTRA_ZIP_NAME)
        get_filename_component(EXTRA_ZIP_NAME ${EXTRA_BINARY_PATH} NAME)
    endif()

    # Prepare target list for dependencies
    set(target_list "${EXTRA_DEPENDS}")

    # Calculate MCUboot slots if MCUboot ID is provided
    if(DEFINED EXTRA_MCUBOOT_IMAGE_ID)
        math(EXPR slot_primary "2 * ${EXTRA_MCUBOOT_IMAGE_ID} + 1")
        math(EXPR slot_secondary "2 * ${EXTRA_MCUBOOT_IMAGE_ID} + 2")
    endif()

    # Save to args file for cross-phase communication
    set(dfu_args_file "${CMAKE_BINARY_DIR}/dfu_extra_binaries.args")

    # Initialize the cache file with header on first call
    file(WRITE "${dfu_args_file}" "# DFU Extra Binaries Cache\n# This file is automatically generated - do not edit manually\n")

    # Build argument lines for this binary
    set(args_content "")
    
    # Multi-image binary support
    if(DEFINED EXTRA_MULTI_IMAGE_ID)
        string(APPEND args_content "MULTI_IMAGE_ID\n${EXTRA_MULTI_IMAGE_ID}\n")
        string(APPEND args_content "MULTI_IMAGE_PATH\n${EXTRA_BINARY_PATH}\n")
        string(APPEND args_content "MULTI_IMAGE_TARGET\n${target_list}\n")
    endif()

    # ZIP package support
    if(DEFINED EXTRA_MCUBOOT_IMAGE_ID)
        string(APPEND args_content "ZIP_PATH\n${EXTRA_BINARY_PATH}\n")
        string(APPEND args_content "ZIP_NAME\n${EXTRA_ZIP_NAME}\n")
        string(APPEND args_content "ZIP_TARGET\n${target_list}\n")
        string(APPEND args_content "ZIP_PARAM\n${EXTRA_ZIP_NAME}image_index=${EXTRA_MCUBOOT_IMAGE_ID}\n")
        string(APPEND args_content "ZIP_PARAM\n${EXTRA_ZIP_NAME}slot_index_primary=${slot_primary}\n")
        string(APPEND args_content "ZIP_PARAM\n${EXTRA_ZIP_NAME}slot_index_secondary=${slot_secondary}\n")
    endif()

    string(APPEND args_content "---\n")
    file(APPEND "${dfu_args_file}" "${args_content}")

    message(STATUS "DFU: Added extra binary to DFU package(s): ${EXTRA_BINARY_PATH}")
endfunction()

#
# Get all extra binary information for use in multi-image packaging
#
# This function is used internally by the packaging system to retrieve
# all registered extra binaries.
#
function(dfu_multi_image_get_extra out_ids out_paths out_targets)
    set(extra_ids)
    set(extra_paths)
    set(extra_targets)
    
    # Load from args file if it exists
    set(dfu_args_file "${CMAKE_BINARY_DIR}/dfu_extra_binaries.args")
    if(EXISTS "${dfu_args_file}")
        file(READ "${dfu_args_file}" args_content)
        string(REPLACE "\n" ";" args_lines "${args_content}")
        
        set(key "")
        foreach(line ${args_lines})
            if(line STREQUAL "---" OR line MATCHES "^ZIP_")
                set(key "")
            elseif(line STREQUAL "MULTI_IMAGE_ID")
                set(key "extra_ids")
            elseif(line STREQUAL "MULTI_IMAGE_PATH")
                set(key "extra_paths")
            elseif(line STREQUAL "MULTI_IMAGE_TARGET")
                set(key "extra_targets")
            elseif(NOT line STREQUAL "" AND NOT key STREQUAL "")
                list(APPEND ${key} "${line}")
            endif()
        endforeach()
    endif()

    set(${out_ids} "${extra_ids}" PARENT_SCOPE)
    set(${out_paths} "${extra_paths}" PARENT_SCOPE)
    set(${out_targets} "${extra_targets}" PARENT_SCOPE)
endfunction()

#
# Get all extra binary information for use in ZIP packaging
#
# This function is used internally by the ZIP packaging system to retrieve
# all registered extra binaries.
#
function(dfu_zip_get_extra out_bin_files out_zip_names out_targets out_script_params)
    set(zip_paths)
    set(zip_targets)
    set(zip_names)
    set(zip_params)

    # Load from args file if it exists
    set(dfu_args_file "${CMAKE_BINARY_DIR}/dfu_extra_binaries.args")
    if(EXISTS "${dfu_args_file}")
        file(READ "${dfu_args_file}" args_content)
        string(REPLACE "\n" ";" args_lines "${args_content}")

        set(key "")
        foreach(line ${args_lines})
            if(line STREQUAL "---" OR line MATCHES "^MULTI_IMAGE_")
                set(key "")
            elseif(line STREQUAL "ZIP_PATH")
                set(key "zip_paths")
            elseif(line STREQUAL "ZIP_TARGET")
                set(key "zip_targets")
            elseif(line STREQUAL "ZIP_NAME")
                set(key "zip_names")
            elseif(line STREQUAL "ZIP_PARAM")
                set(key "zip_params")
            elseif(NOT line STREQUAL "" AND NOT key STREQUAL "")
                list(APPEND ${key} "${line}")
            endif()
        endforeach()
    endif()

    set(${out_bin_files} "${zip_paths}" PARENT_SCOPE)
    set(${out_zip_names} "${zip_names}" PARENT_SCOPE)
    set(${out_targets} "${zip_targets}" PARENT_SCOPE)
    set(${out_script_params} "${zip_params}" PARENT_SCOPE)
endfunction()
